# 🐳 Docker Setup Guide

## 🔐 Security Tips

### For Production:

1. **Change default passwords** in `docker-compose.yml`
2. **Use environment variables:**
   ```bash
   # Create .env file
   MYSQL_ROOT_PASSWORD=strong_password_here
   MYSQL_PASSWORD=another_strong_password
   ```

3. **Don't expose MySQL port** (remove port mapping if not needed):
   ```yaml
   mysql:
     # Remove this line for production:
     # ports:
     #   - "3306:3306"
   ```

4. **Use Docker secrets** for sensitive data
5. **Enable SSL/TLS** for database connections
6. **Regular backups** of database volumes

---

## 📱 Accessing from Other Devices

### Access from Same Network

1. Find your computer's IP address:
   ```bash
   # Windows
   ipconfig
   
   # Mac/Linux
   ifconfig
   ```

2. Access from other device:
   ```
   http://YOUR_IP:3000
   ```

### Example:
If your IP is `192.168.1.100`, access from phone/tablet:
```
http://192.168.1.100:3000
```

---

## 🔄 Updating the Application

### Update Application Code:

```bash
# Pull latest changes (if using git)
git pull

# Rebuild and restart
docker-compose up -d --build
```

### Update Dependencies:

```bash
# Stop containers
docker-compose down

# Edit package.json (add/update dependencies)

# Rebuild
docker-compose build --no-cache

# Start
docker-compose up -d
```

### Update Docker Images:

```bash
# Pull latest MySQL image
docker-compose pull

# Recreate containers
docker-compose up -d --force-recreate
```

---

## 📋 Complete File Checklist

Before running Docker, ensure you have:

- [ ] ✅ **Dockerfile** - Container image definition
- [ ] ✅ **docker-compose.yml** - Multi-container orchestration
- [ ] ✅ **.dockerignore** - Exclude unnecessary files
- [ ] ✅ **server.js** - Updated with Docker environment variables
- [ ] ✅ **package.json** - Dependencies list
- [ ] ✅ **database.sql** - Database initialization script
- [ ] ✅ **public/front.html** - Home page
- [ ] ✅ **public/new.html** - Add case page
- [ ] ✅ **public/update.html** - Update case page
- [ ] ✅ **public/find.html** - Find case page

---

## 🎓 Learning Resources

- **Docker Docs:** https://docs.docker.com/
- **Docker Compose:** https://docs.docker.com/compose/
- **Docker Hub:** https://hub.docker.com/
- **Best Practices:** https://docs.docker.com/develop/dev-best-practices/

---

**Happy Dockerizing! 🐳**Why Use Docker?

✅ **No MySQL installation needed** - Everything runs in containers  
✅ **Consistent environment** - Works the same on any computer  
✅ **Easy deployment** - One command to start everything  
✅ **Isolated** - Won't conflict with other projects  
✅ **Production-ready** - Deploy anywhere easily  

---

## 📋 Prerequisites

### Install Docker Desktop

**Windows:**
1. Download: https://www.docker.com/products/docker-desktop/
2. Install Docker Desktop
3. Restart computer
4. Open Docker Desktop (keep it running)

**Mac:**
1. Download: https://www.docker.com/products/docker-desktop/
2. Install Docker Desktop
3. Open Docker Desktop (keep it running)

**Linux:**
```bash
sudo apt-get update
sudo apt-get install docker.io docker-compose
sudo systemctl start docker
```

### Verify Installation
```bash
docker --version
docker-compose --version
```

---

## 📁 Required Files for Docker

You need these files in your project folder:

```
justice-client-portal/
├── Dockerfile              ← Docker image definition
├── docker-compose.yml      ← Multi-container setup
├── .dockerignore           ← Files to ignore
├── server.js               ← Updated with Docker support
├── package.json            ← Dependencies
├── database.sql            ← Database initialization
└── public/
    ├── front.html
    ├── new.html
    ├── update.html
    └── find.html
```

---

## 🚀 Quick Start with Docker

### Option 1: Using Docker Compose (Recommended)

```bash
# Navigate to project folder
cd justice-client-portal

# Start everything with one command
docker-compose up -d

# Wait for containers to start (30 seconds)

# Check if running
docker-compose ps

# Open browser
http://localhost:3000
```

**That's it!** MySQL and your app are now running in containers!

### Option 2: Step by Step

```bash
# 1. Build the Docker image
docker-compose build

# 2. Start the containers
docker-compose up -d

# 3. View logs (optional)
docker-compose logs -f

# 4. Access the application
http://localhost:3000
```

---

## 🎯 Docker Commands Cheat Sheet

### Starting & Stopping

```bash
# Start all services
docker-compose up -d

# Stop all services
docker-compose down

# Restart all services
docker-compose restart

# Stop and remove everything (including data)
docker-compose down -v
```

### Viewing Logs

```bash
# View all logs
docker-compose logs

# Follow logs in real-time
docker-compose logs -f

# View app logs only
docker-compose logs app

# View database logs only
docker-compose logs mysql
```

### Container Management

```bash
# List running containers
docker-compose ps

# Check container status
docker ps

# Enter app container
docker-compose exec app sh

# Enter MySQL container
docker-compose exec mysql bash

# View MySQL logs
docker-compose logs mysql
```

### Database Access

```bash
# Connect to MySQL from terminal
docker-compose exec mysql mysql -u lawuser -plawpassword law_department

# Run SQL commands
docker-compose exec mysql mysql -u lawuser -plawpassword law_department -e "SELECT * FROM cases;"

# Backup database
docker-compose exec mysql mysqldump -u lawuser -plawpassword law_department > backup.sql

# Restore database
docker-compose exec -T mysql mysql -u lawuser -plawpassword law_department < backup.sql
```

---

## 🔧 Configuration

### Default Settings

**Database:**
- Host: `mysql` (inside Docker network)
- User: `lawuser`
- Password: `lawpassword`
- Database: `law_department`
- Port: `3306` (accessible from host)

**Application:**
- Port: `3000`
- URL: `http://localhost:3000`

### Changing Configuration

Edit `docker-compose.yml`:

```yaml
environment:
  MYSQL_ROOT_PASSWORD: your_root_password    # Change root password
  MYSQL_DATABASE: law_department
  MYSQL_USER: your_username                   # Change username
  MYSQL_PASSWORD: your_password               # Change password
```

---

## 📊 What's Running?

When you run `docker-compose up`, you get:

| Service | Container Name | Port | Purpose |
|---------|---------------|------|---------|
| MySQL | law_department_db | 3306 | Database |
| App | law_department_app | 3000 | Web application |

---

## 🐛 Troubleshooting

### Problem: "Port already in use"

**Error:** `Bind for 0.0.0.0:3000 failed: port is already allocated`

**Solution 1:** Stop other services using port 3000
```bash
# Windows
netstat -ano | findstr :3000
taskkill /PID <process_id> /F

# Mac/Linux
lsof -ti:3000 | xargs kill -9
```

**Solution 2:** Change port in `docker-compose.yml`
```yaml
services:
  app:
    ports:
      - "3001:3000"  # Change 3001 to any available port
```

### Problem: Database connection refused

**Solution:** Wait for MySQL to fully start (30 seconds), then restart app:
```bash
docker-compose restart app
```

### Problem: Can't access website

**Solution:** Check if containers are running:
```bash
docker-compose ps

# Should show both services as "Up"
```

### Problem: Need to reset everything

**Solution:** Remove everything and start fresh:
```bash
# Stop and remove containers, networks, and volumes
docker-compose down -v

# Remove Docker images
docker-compose down --rmi all

# Start again
docker-compose up -d
```

### Problem: Database is empty

**Solution:** The database.sql file initializes on first start. If you need to reinitialize:
```bash
# Remove volume
docker-compose down -v

# Start again (will run init script)
docker-compose up -d
```

---

## 🔄 Development Workflow

### Making Changes

**Frontend Changes (HTML/CSS/JS):**
1. Edit files in `public` folder
2. Refresh browser (no restart needed)

**Backend Changes (server.js):**
1. Edit server.js
2. Restart app container:
   ```bash
   docker-compose restart app
   ```

**Database Changes:**
1. Connect to MySQL:
   ```bash
   docker-compose exec mysql mysql -u lawuser -plawpassword law_department
   ```
2. Run your SQL commands
3. Type `exit` to quit

---

## 📦 Data Persistence

Your data is stored in Docker volumes:

```bash
# View volumes
docker volume ls

# Backup data
docker run --rm -v justice-client-portal_mysql_data:/data -v $(pwd):/backup ubuntu tar czf /backup/mysql-backup.tar.gz /data

# Restore data
docker run --rm -v justice-client-portal_mysql_data:/data -v $(pwd):/backup ubuntu tar xzf /backup/mysql-backup.tar.gz -C /
```

---

## 🚀 Deployment

### Deploy to Production Server

1. **Copy files to server:**
   ```bash
   scp -r justice-client-portal user@server:/path/
   ```

2. **On server, start services:**
   ```bash
   cd justice-client-portal
   docker-compose up -d
   ```

3. **Configure firewall:**
   ```bash
   # Allow port 3000
   sudo ufw allow 3000
   ```

4. **Setup nginx reverse proxy (optional):**
   ```nginx
   server {
       listen 80;
       server_name yourdomain.com;
       
       location / {
           proxy_pass http://localhost:3000;
           proxy_http_version 1.1;
           proxy_set_header Upgrade $http_upgrade;
           proxy_set_header Connection 'upgrade';
           proxy_set_header Host $host;
           proxy_cache_bypass $http_upgrade;
       }
   }
   ```

---

## 📊 Monitoring

### View Application Health

```bash
# Health check endpoint
curl http://localhost:3000/health

# Response:
# {"status":"healthy","timestamp":"2025-01-10T..."}
```

### View Resource Usage

```bash
# Container stats
docker stats

# Detailed info
docker-compose ps
docker-compose top
```

---

## 🎯 Quick Commands Summary

```bash
# Start
docker-compose up -d

# Stop
docker-compose down

# View logs
docker-compose logs -f

# Restart app
docker-compose restart app

# Access MySQL
docker-compose exec mysql mysql -u lawuser -plawpassword law_department

# Reset everything
docker-compose down -v && docker-compose up -d

# Check status
docker-compose ps
```

---

## ✅ Advantages of Docker Setup

| Feature | Without Docker | With Docker |
|---------|---------------|-------------|
| **MySQL Installation** | Required | Not needed |
| **Node.js Version** | Must match | Always correct |
| **Configuration** | Manual setup | Automated |
| **Deployment** | Complex | One command |
| **Environment** | May vary | Consistent |
| **Data Backup** | Manual | Volume snapshots |
| **Cleanup** | Manual | `docker-compose down` |

---

## 🆚 Docker vs Traditional Setup

### Use Docker If:
✅ You want easy deployment  
✅ You don't want to install MySQL  
✅ You need consistent environments  
✅ You're deploying to cloud/server  
✅ You work in a team  

### Use Traditional Setup If:
✅ You already have MySQL installed  
✅ You prefer direct access to services  
✅ You're just learning/testing  
✅ You need to customize MySQL heavily  

---

## 🎉 Success!

If you can access `http://localhost:3000` and see your application, you're all set!

**Next steps:**
1. ✅ Add some test cases
2. ✅ Test all features
3. ✅ Backup your data regularly
4. ✅ Deploy to production (if needed)

---

##
